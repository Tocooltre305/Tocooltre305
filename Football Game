{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMMiV9DTtPZmxMLduN7Kdk4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tocooltre305/Tocooltre305/blob/main/Football%20Game\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cZT6n6mkyiVw",
        "outputId": "4e2607c5-1a27-4d0c-fcc6-b5709b4943b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Minute 0: Player 9 (Rival FC) scored for Rival FC!\n",
            "Minute 1: Player 7 (FC 25) scored for FC 25!\n",
            "Minute 2: Player 2 (Rival FC) scored for Rival FC!\n",
            "Minute 4: Player 8 (Rival FC) scored for Rival FC!\n",
            "Minute 7: Player 9 (FC 25) scored for FC 25!\n",
            "Minute 8: Player 2 (Rival FC) scored for Rival FC!\n",
            "Minute 9: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 10: Player 8 (FC 25) scored for FC 25!\n",
            "Minute 11: Player 2 (Rival FC) scored for Rival FC!\n",
            "Minute 12: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 13: Player 8 (FC 25) scored for FC 25!\n",
            "Minute 18: Player 6 (FC 25) scored for FC 25!\n",
            "Minute 19: Player 4 (Rival FC) scored for Rival FC!\n",
            "Minute 22: Player 3 (Rival FC) scored for Rival FC!\n",
            "Minute 23: Player 3 (Rival FC) scored for Rival FC!\n",
            "Minute 24: Player 6 (Rival FC) scored for Rival FC!\n",
            "Minute 25: Player 10 (Rival FC) scored for Rival FC!\n",
            "Minute 27: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 28: Player 1 (FC 25) scored for FC 25!\n",
            "Minute 29: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 30: Player 8 (Rival FC) scored for Rival FC!\n",
            "Minute 31: Player 5 (FC 25) scored for FC 25!\n",
            "Minute 32: Player 5 (Rival FC) scored for Rival FC!\n",
            "Minute 33: Player 6 (FC 25) scored for FC 25!\n",
            "Minute 34: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 36: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 38: Player 9 (Rival FC) scored for Rival FC!\n",
            "Minute 40: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 42: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 43: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 46: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 47: Player 8 (Rival FC) scored for Rival FC!\n",
            "Minute 48: Player 2 (FC 25) scored for FC 25!\n",
            "Minute 49: Player 7 (FC 25) scored for FC 25!\n",
            "Minute 51: Player 2 (Rival FC) scored for Rival FC!\n",
            "Minute 52: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 53: Player 8 (FC 25) scored for FC 25!\n",
            "Minute 54: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 55: Player 6 (Rival FC) scored for Rival FC!\n",
            "Minute 57: Player 8 (Rival FC) scored for Rival FC!\n",
            "Minute 58: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 60: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 61: Player 7 (FC 25) scored for FC 25!\n",
            "Minute 63: Player 2 (Rival FC) scored for Rival FC!\n",
            "Minute 64: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 65: Player 5 (FC 25) scored for FC 25!\n",
            "Minute 66: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 67: Player 1 (FC 25) scored for FC 25!\n",
            "Minute 71: Player 3 (FC 25) scored for FC 25!\n",
            "Minute 72: Player 1 (Rival FC) scored for Rival FC!\n",
            "Minute 73: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 75: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 79: Player 2 (FC 25) scored for FC 25!\n",
            "Minute 80: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 81: Player 1 (FC 25) scored for FC 25!\n",
            "Minute 82: Player 7 (FC 25) scored for FC 25!\n",
            "Minute 83: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 85: Player 7 (FC 25) scored for FC 25!\n",
            "Minute 86: Player 11 (FC 25) scored for FC 25!\n",
            "Minute 87: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 88: Player 10 (FC 25) scored for FC 25!\n",
            "Minute 89: Player 10 (FC 25) scored for FC 25!\n",
            "FC 25 38 - 24 Rival FC\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "\n",
        "# Define a player class\n",
        "class Player:\n",
        "    def __init__(self, name, attack, defense):\n",
        "        self.name = name\n",
        "        self.attack = attack\n",
        "        self.defense = defense\n",
        "        self.fatigue = 0  # Fatigue increases over the match\n",
        "\n",
        "    def attack_opponent(self):\n",
        "        # Fatigue decreases effectiveness\n",
        "        attack_value = self.attack - self.fatigue\n",
        "        return max(attack_value, 0)\n",
        "\n",
        "    def defend_goal(self):\n",
        "        defense_value = self.defense - self.fatigue\n",
        "        return max(defense_value, 0)\n",
        "\n",
        "    def increase_fatigue(self):\n",
        "        self.fatigue += random.randint(1, 5)  # Increase fatigue over time\n",
        "\n",
        "\n",
        "# Define a team class\n",
        "class Team:\n",
        "    def __init__(self, name, players):\n",
        "        self.name = name\n",
        "        self.players = players\n",
        "        self.score = 0\n",
        "\n",
        "    def get_random_player(self):\n",
        "        return random.choice(self.players)\n",
        "\n",
        "    def attack(self, opponent):\n",
        "        attacker = self.get_random_player()\n",
        "        defender = opponent.get_random_player()\n",
        "\n",
        "        # Simulate player fatigue\n",
        "        attacker.increase_fatigue()\n",
        "        defender.increase_fatigue()\n",
        "\n",
        "        # Compare attacker's attack vs defender's defense\n",
        "        if attacker.attack_opponent() > defender.defend_goal():\n",
        "            self.score += 1\n",
        "            return f\"{attacker.name} scored for {self.name}!\"\n",
        "\n",
        "        return None\n",
        "\n",
        "\n",
        "# Simulate a football game\n",
        "class FootballGame:\n",
        "    def __init__(self, team1, team2):\n",
        "        self.team1 = team1\n",
        "        self.team2 = team2\n",
        "        self.minutes = 0\n",
        "        self.events = []\n",
        "\n",
        "    def simulate_minute(self):\n",
        "        if random.randint(0, 1) == 0:\n",
        "            event = self.team1.attack(self.team2)\n",
        "        else:\n",
        "            event = self.team2.attack(self.team1)\n",
        "\n",
        "        if event:\n",
        "            self.events.append(f\"Minute {self.minutes}: {event}\")\n",
        "\n",
        "    def play(self):\n",
        "        for self.minutes in range(90):\n",
        "            self.simulate_minute()\n",
        "\n",
        "        return self.events\n",
        "\n",
        "    def result(self):\n",
        "        return f\"{self.team1.name} {self.team1.score} - {self.team2.score} {self.team2.name}\"\n",
        "\n",
        "\n",
        "# Define players for each team\n",
        "players_team1 = [Player(f\"Player {i} (FC 25)\", random.randint(60, 90), random.randint(50, 80)) for i in range(1, 12)]\n",
        "players_team2 = [Player(f\"Player {i} (Rival FC)\", random.randint(60, 90), random.randint(50, 80)) for i in range(1, 12)]\n",
        "\n",
        "# Create teams\n",
        "team1 = Team(\"FC 25\", players_team1)\n",
        "team2 = Team(\"Rival FC\", players_team2)\n",
        "\n",
        "# Simulate the football game\n",
        "game = FootballGame(team1, team2)\n",
        "events = game.play()\n",
        "\n",
        "# Display the events and result\n",
        "for event in events:\n",
        "    print(event)\n",
        "\n",
        "print(game.result())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Define a player class\n",
        "class Player:\n",
        "    def __init__(self, name, attack, defense):\n",
        "        self.name = name\n",
        "        self.attack = attack\n",
        "        self.defense = defense\n",
        "        self.fatigue = 0  # Fatigue increases over the match\n",
        "\n",
        "    def attack_opponent(self):\n",
        "        # Fatigue decreases effectiveness\n",
        "        attack_value = self.attack - self.fatigue\n",
        "        return max(attack_value, 0)\n",
        "\n",
        "    def defend_goal(self):\n",
        "        defense_value = self.defense - self.fatigue\n",
        "        return max(defense_value, 0)\n",
        "\n",
        "    def increase_fatigue(self):\n",
        "        self.fatigue += random.randint(1, 3)  # Fatigue grows slowly to avoid sharp decline\n",
        "\n",
        "# Define a goalkeeper class with better defense\n",
        "class Goalkeeper(Player):\n",
        "    def __init__(self, name, defense):\n",
        "        super().__init__(name, 0, defense)  # Attack is zero for a goalkeeper\n",
        "\n",
        "# Define a team class\n",
        "class Team:\n",
        "    def __init__(self, name, players, goalkeeper):\n",
        "        self.name = name\n",
        "        self.players = players\n",
        "        self.goalkeeper = goalkeeper\n",
        "        self.score = 0\n",
        "\n",
        "    def get_random_attacker(self):\n",
        "        # Return a random attacking player\n",
        "        return random.choice(self.players)\n",
        "\n",
        "    def attack(self, opponent):\n",
        "        attacker = self.get_random_attacker()\n",
        "        defender = opponent.goalkeeper  # Attacks are always defended by the goalkeeper\n",
        "\n",
        "        # Simulate player fatigue\n",
        "        attacker.increase_fatigue()\n",
        "        defender.increase_fatigue()\n",
        "\n",
        "        # Compare attacker's attack vs goalkeeper's defense\n",
        "        if attacker.attack_opponent() > defender.defend_goal():\n",
        "            self.score += 1\n",
        "            return f\"{attacker.name} scored for {self.name}!\"\n",
        "\n",
        "        return None\n",
        "\n",
        "# Simulate a football game\n",
        "class FootballGame:\n",
        "    def __init__(self, team1, team2):\n",
        "        self.team1 = team1\n",
        "        self.team2 = team2\n",
        "        self.minutes = 0\n",
        "        self.events = []\n",
        "\n",
        "    def simulate_minute(self):\n",
        "        # Reduced chance of an attack per minute to reflect realistic goal frequency\n",
        "        if random.randint(0, 9) == 0:  # Only 10% chance of an attack each minute\n",
        "            if random.randint(0, 1) == 0:\n",
        "                event = self.team1.attack(self.team2)\n",
        "            else:\n",
        "                event = self.team2.attack(self.team1)\n",
        "\n",
        "            if event:\n",
        "                self.events.append(f\"Minute {self.minutes}: {event}\")\n",
        "\n",
        "    def play(self):\n",
        "        for self.minutes in range(90):\n",
        "            self.simulate_minute()\n",
        "\n",
        "        return self.events\n",
        "\n",
        "    def result(self):\n",
        "        return f\"{self.team1.name} {self.team1.score} - {self.team2.score} {self.team2.name}\"\n",
        "\n",
        "\n",
        "# Define players and goalkeepers for each team\n",
        "players_team1 = [Player(f\"Player {i} (FC 25)\", random.randint(60, 85), random.randint(50, 75)) for i in range(1, 11)]\n",
        "goalkeeper_team1 = Goalkeeper(\"Goalkeeper (FC 25)\", random.randint(80, 95))\n",
        "\n",
        "players_team2 = [Player(f\"Player {i} (Rival FC)\", random.randint(60, 85), random.randint(50, 75)) for i in range(1, 11)]\n",
        "goalkeeper_team2 = Goalkeeper(\"Goalkeeper (Rival FC)\", random.randint(80, 95))\n",
        "\n",
        "# Create teams\n",
        "team1 = Team(\"FC 25\", players_team1, goalkeeper_team1)\n",
        "team2 = Team(\"Rival FC\", players_team2, goalkeeper_team2)\n",
        "\n",
        "# Simulate the football game\n",
        "game = FootballGame(team1, team2)\n",
        "events = game.play()\n",
        "\n",
        "# Display the events and result\n",
        "for event in events:\n",
        "    print(event)\n",
        "\n",
        "print(game.result())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CgPvsMt-zPxj",
        "outputId": "b9425dc5-5248-4821-d232-cecf005dbeb6"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Minute 87: Player 6 (FC 25) scored for FC 25!\n",
            "FC 25 1 - 0 Rival FC\n"
          ]
        }
      ]
    }
  ]
}